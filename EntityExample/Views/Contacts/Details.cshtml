@using System.Security.Claims
@model EntityExample.Models.Contacts
@inject Microsoft.AspNetCore.Identity.SignInManager<User> SignInManager;
@inject Microsoft.AspNetCore.Identity.UserManager<User> UserManager;

@{
	ViewData["Title"] = "Details";
	string userEmail = User.FindFirst(ClaimTypes.Email).Value.ToString();
	var user = await UserManager.GetUserAsync(User);
	var role = await UserManager.GetRolesAsync(user);
}

<h1>Details</h1>

<div>
	<h4>Contacts</h4>
	<hr />
	<dl class="row">
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.Address)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.Address)
		</dd>
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.City)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.City)
		</dd>
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.EmailAddress)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.EmailAddress)
		</dd>
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.Name)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.Name)
		</dd>
		<dt class="col-sm-2">
			@Html.DisplayNameFor(model => model.Status)
		</dt>
		<dd class="col-sm-10">
			@Html.DisplayFor(model => model.Status)
		</dd>
	</dl>
</div>
<div class="d-flex">
	@if (role[0] == UserRoles.Admin.ToString() || role[0] == UserRoles.Manager.ToString())
	{
		<div class="me-3">
			<form method="post" asp-action="Approve" asp-controller="Contacts" asp-route-id="@Model?.Id">
				<button class="btn btn-success" type="submit">Approve</button>
			</form>
		</div>
		<div class="me-3">
			<form method="post" asp-action="Reject" asp-controller="Contacts" asp-route-id="@Model?.Id">
				<button class="btn btn-danger" type="submit">Reject</button>
			</form>
		</div>
	}

</div>
<div>
	@if (userEmail == Model?.EmailAddress)
	{
		<a asp-action="Index">Back to List</a>
		<a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a>
	}
	else
	{
		<a asp-action="Index">Back to List</a>
	}
</div>
